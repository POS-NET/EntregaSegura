// <auto-generated />
using System;
using EntregaSegura.Infra.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntregaSegura.Infra.Data.Migrations
{
    [DbContext(typeof(EntregaSeguraContext))]
    [Migration("20230609215805_Inicial")]
    partial class Inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EntregaSegura.Domain.Entities.Condominio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CND_ID")
                        .HasColumnOrder(1)
                        .HasComment("Chave primária do condomínio");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CND_BAIRRO")
                        .HasColumnOrder(9)
                        .HasComment("Bairro do endereço do condomínio");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("varchar(8)")
                        .HasColumnName("CND_CEP")
                        .HasColumnOrder(6)
                        .HasComment("CEP do endereço do condomínio");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CND_CIDADE")
                        .HasColumnOrder(10)
                        .HasComment("Cidade do endereço do condomínio");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("varchar(14)")
                        .HasColumnName("CND_CNPJ")
                        .HasColumnOrder(3)
                        .HasComment("CNPJ do condomínio");

                    b.Property<DateTime>("DataAtualizacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CND_DATA_ATUALIZACAO")
                        .HasColumnOrder(16)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Data da última atualização do condomínio");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CND_DATA_CRIACAO")
                        .HasColumnOrder(15)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Data de criação do condomínio");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CND_EMAIL")
                        .HasColumnOrder(5)
                        .HasComment("E-mail do condomínio");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(2)")
                        .HasColumnName("CND_ESTADO")
                        .HasColumnOrder(11)
                        .HasComment("Estado do endereço do condomínio");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CND_LOGRADOURO")
                        .HasColumnOrder(7)
                        .HasComment("Logradouro do endereço do condomínio");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CND_NOME")
                        .HasColumnOrder(2)
                        .HasComment("Nome do condomínio");

                    b.Property<int>("Numero")
                        .HasColumnType("int")
                        .HasColumnName("CND_NUMERO")
                        .HasColumnOrder(8)
                        .HasComment("Número do endereço do condomínio");

                    b.Property<int>("QuantidadeAndares")
                        .HasColumnType("int")
                        .HasColumnName("CND_QTD_ANDARES")
                        .HasColumnOrder(14)
                        .HasComment("Quantidade de andares do condomínio");

                    b.Property<int>("QuantidadeBlocos")
                        .HasColumnType("int")
                        .HasColumnName("CND_QTD_BLOCOS")
                        .HasColumnOrder(13)
                        .HasComment("Quantidade de blocos do condomínio");

                    b.Property<int>("QuantidadeUnidades")
                        .HasColumnType("int")
                        .HasColumnName("CND_QTD_UNIDADES")
                        .HasColumnOrder(12)
                        .HasComment("Quantidade de unidades do condomínio");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("varchar(11)")
                        .HasColumnName("CND_TELEFONE")
                        .HasColumnOrder(4)
                        .HasComment("Telefone do condomínio");

                    b.HasKey("Id")
                        .HasName("PK_CONDOMINIOS");

                    b.HasIndex("Cnpj")
                        .IsUnique()
                        .HasDatabaseName("IX_CONDOMINIOS_CNPJ");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_CONDOMINIOS_EMAIL");

                    b.HasIndex("Nome")
                        .IsUnique()
                        .HasDatabaseName("IX_CONDOMINIOS_NOME");

                    b.ToTable("TB_CONDOMINIOS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bairro = "Jardim Paulistano",
                            Cep = "04567010",
                            Cidade = "São Paulo",
                            Cnpj = "17540623000150",
                            Email = "contato@boavista.com.br",
                            Estado = "SP",
                            Logradouro = "Rua das Acácias",
                            Nome = "Condomínio Boa Vista",
                            Numero = 55,
                            QuantidadeAndares = 4,
                            QuantidadeBlocos = 2,
                            QuantidadeUnidades = 7,
                            Telefone = "1140028922"
                        });
                });

            modelBuilder.Entity("EntregaSegura.Domain.Entities.Entrega", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ETG_ID")
                        .HasColumnOrder(1)
                        .HasComment("Chave primária da entrega");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataAtualizacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ETG_DATA_ATUALIZACAO")
                        .HasColumnOrder(11)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Data da última atualização da entrega");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ETG_DATA_CRIACAO")
                        .HasColumnOrder(10)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Data de criação da entrega");

                    b.Property<DateTime>("DataRecebimento")
                        .HasColumnType("datetime")
                        .HasColumnName("ETG_DATA_RECEBIMENTO")
                        .HasColumnOrder(5)
                        .HasComment("Data de recebimento da entrega");

                    b.Property<DateTime?>("DataRetirada")
                        .HasColumnType("datetime")
                        .HasColumnName("ETG_DATA_RETIRADA")
                        .HasColumnOrder(6)
                        .HasComment("Data de retirada da entrega");

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("ETG_DESCRICAO")
                        .HasColumnOrder(7)
                        .HasComment("Descrição da entrega");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int")
                        .HasColumnName("FUN_ID")
                        .HasColumnOrder(3)
                        .HasComment("Chave estrangeira do funcionário");

                    b.Property<int>("MoradorId")
                        .HasColumnType("int")
                        .HasColumnName("MOR_ID")
                        .HasColumnOrder(4)
                        .HasComment("Chave estrangeira do morador");

                    b.Property<string>("Observacao")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("ETG_OBSERVACAO")
                        .HasColumnOrder(8)
                        .HasComment("Observação da entrega");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("ETG_STATUS")
                        .HasColumnOrder(9)
                        .HasComment("Status da entrega");

                    b.Property<int>("TransportadoraId")
                        .HasColumnType("int")
                        .HasColumnName("TRP_ID")
                        .HasColumnOrder(2)
                        .HasComment("Chave estrangeira da transportadora");

                    b.HasKey("Id")
                        .HasName("PK_ENTREGAS");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("MoradorId");

                    b.HasIndex("TransportadoraId");

                    b.ToTable("TB_ENTREGAS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataRecebimento = new DateTime(2023, 6, 9, 18, 58, 4, 683, DateTimeKind.Local).AddTicks(1201),
                            Descricao = "Entrega Teste 1",
                            FuncionarioId = 1,
                            MoradorId = 1,
                            Observacao = "Observação Teste 1",
                            Status = 3,
                            TransportadoraId = 1
                        });
                });

            modelBuilder.Entity("EntregaSegura.Domain.Entities.Funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FUN_ID")
                        .HasColumnOrder(1)
                        .HasComment("Chave primária do funcionário");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Cargo")
                        .HasColumnType("int")
                        .HasColumnName("FUN_CARGO")
                        .HasColumnOrder(6)
                        .HasComment("Cargo do funcionário");

                    b.Property<int>("CondominioId")
                        .HasColumnType("int")
                        .HasColumnName("FUN_CONDOMINIO_ID")
                        .HasColumnOrder(11)
                        .HasComment("Chave estrangeira do condomínio");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("varchar(11)")
                        .HasColumnName("FUN_CPF")
                        .HasColumnOrder(3)
                        .HasComment("CPF do funcionário");

                    b.Property<DateTime>("DataAdmissao")
                        .HasColumnType("datetime")
                        .HasColumnName("FUN_DATA_ADMISSAO")
                        .HasColumnOrder(7)
                        .HasComment("Data de admissão do funcionário");

                    b.Property<DateTime>("DataAtualizacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FUN_DATA_ATUALIZACAO")
                        .HasColumnOrder(10)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Data da última atualização do funcionário");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FUN_DATA_CRIACAO")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Data de criação do funcionário");

                    b.Property<DateTime?>("DataDemissao")
                        .HasColumnType("datetime")
                        .HasColumnName("FUN_DATA_DEMISSAO")
                        .HasColumnOrder(8)
                        .HasComment("Data de demissão do funcionário");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FUN_EMAIL")
                        .HasColumnOrder(4)
                        .HasComment("Email do funcionário");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FUN_NOME")
                        .HasColumnOrder(2)
                        .HasComment("Nome do funcionário");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("varchar(11)")
                        .HasColumnName("FUN_TELEFONE")
                        .HasColumnOrder(5)
                        .HasComment("Telefone do funcionário");

                    b.HasKey("Id")
                        .HasName("PK_FUNCIONARIOS");

                    b.HasIndex("CondominioId");

                    b.HasIndex("Cpf")
                        .IsUnique()
                        .HasDatabaseName("IX_FUNCIONARIO_CPF");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_FUNCIONARIO_EMAIL");

                    b.ToTable("TB_FUNCIONARIOS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cargo = 2,
                            CondominioId = 1,
                            Cpf = "12345678903",
                            DataAdmissao = new DateTime(2023, 6, 9, 18, 58, 4, 683, DateTimeKind.Local).AddTicks(1140),
                            Email = "funcionario1@teste.com",
                            Nome = "Funcionário Teste 1",
                            Telefone = "1234567892"
                        });
                });

            modelBuilder.Entity("EntregaSegura.Domain.Entities.Morador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MOR_ID")
                        .HasColumnOrder(1)
                        .HasComment("Chave primária do morador");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("varchar(11)")
                        .HasColumnName("MOR_CPF")
                        .HasColumnOrder(3)
                        .HasComment("CPF do morador");

                    b.Property<DateTime>("DataAtualizacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("MOR_DATA_ATUALIZACAO")
                        .HasColumnOrder(10)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Data da última atualização do morador");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("MOR_DATA_CRIACAO")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Data de criação do morador");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MOR_EMAIL")
                        .HasColumnOrder(4)
                        .HasComment("Email do morador");

                    b.Property<string>("Foto")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MOR_FOTO")
                        .HasColumnOrder(7)
                        .HasComment("Foto do morador");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MOR_NOME")
                        .HasColumnOrder(2)
                        .HasComment("Nome do morador");

                    b.Property<string>("Ramal")
                        .HasColumnType("varchar(5)")
                        .HasColumnName("MOR_RAMAL")
                        .HasColumnOrder(6)
                        .HasComment("Ramal do morador");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("varchar(11)")
                        .HasColumnName("MOR_TELEFONE")
                        .HasColumnOrder(5)
                        .HasComment("Telefone do morador");

                    b.Property<int>("UnidadeId")
                        .HasColumnType("int")
                        .HasColumnName("MOR_UNIDADE_ID")
                        .HasColumnOrder(8)
                        .HasComment("Chave estrangeira da unidade do morador");

                    b.HasKey("Id")
                        .HasName("PK_MORADORES");

                    b.HasIndex("Cpf")
                        .IsUnique()
                        .HasDatabaseName("IX_MORADORES_CPF");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_MORADORES_EMAIL");

                    b.HasIndex("UnidadeId")
                        .HasDatabaseName("IX_MORADORES_UNIDADE_ID");

                    b.ToTable("TB_MORADORES", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cpf = "12345678901",
                            Email = "morador1@teste.com",
                            Foto = "foto1.jpg",
                            Nome = "Morador Teste 1",
                            Ramal = "123",
                            Telefone = "1234567890",
                            UnidadeId = 1
                        });
                });

            modelBuilder.Entity("EntregaSegura.Domain.Entities.Transportadora", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TRA_ID")
                        .HasColumnOrder(1)
                        .HasComment("Chave primária da transportadora");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Cnpj")
                        .HasColumnType("varchar(14)")
                        .HasColumnName("TRA_CNPJ")
                        .HasColumnOrder(3)
                        .HasComment("CNPJ da transportadora");

                    b.Property<DateTime>("DataAtualizacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("TRA_DATA_ATUALIZACAO")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Data da última atualização da transportadora");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("TRA_DATA_CRIACAO")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Data de criação da transportadora");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TRA_EMAIL")
                        .HasColumnOrder(5)
                        .HasComment("E-mail da transportadora");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TRA_NOME")
                        .HasColumnOrder(2)
                        .HasComment("Nome da transportadora");

                    b.Property<string>("Telefone")
                        .HasColumnType("varchar(11)")
                        .HasColumnName("TRA_TELEFONE")
                        .HasColumnOrder(4)
                        .HasComment("Telefone da transportadora");

                    b.HasKey("Id")
                        .HasName("PK_TRANSPORTADORAS");

                    b.HasIndex("Cnpj")
                        .IsUnique()
                        .HasDatabaseName("IX_TRANSPORTADORAS_CNPJ")
                        .HasFilter("[TRA_CNPJ] IS NOT NULL");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_TRANSPORTADORAS_EMAIL")
                        .HasFilter("[TRA_EMAIL] IS NOT NULL");

                    b.HasIndex("Nome")
                        .IsUnique()
                        .HasDatabaseName("IX_TRANSPORTADORAS_NOME");

                    b.HasIndex("Telefone")
                        .IsUnique()
                        .HasDatabaseName("IX_TRANSPORTADORAS_TELEFONE")
                        .HasFilter("[TRA_TELEFONE] IS NOT NULL");

                    b.ToTable("TB_TRANSPORTADORAS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cnpj = "12345678912347",
                            Email = "transportadora1@teste.com",
                            Nome = "Transportadora Teste 1",
                            Telefone = "1234567894"
                        });
                });

            modelBuilder.Entity("EntregaSegura.Domain.Entities.Unidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UND_ID")
                        .HasColumnOrder(1)
                        .HasComment("Chave primária da unidade");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Andar")
                        .HasColumnType("int")
                        .HasColumnName("UND_ANDAR")
                        .HasColumnOrder(4)
                        .HasComment("Andar da unidade");

                    b.Property<string>("Bloco")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("UND_BLOCO")
                        .HasColumnOrder(5)
                        .HasComment("Bloco da unidade");

                    b.Property<int>("CondominioId")
                        .HasColumnType("int")
                        .HasColumnName("CON_ID")
                        .HasColumnOrder(2)
                        .HasComment("Chave estrangeira do condomínio");

                    b.Property<DateTime>("DataAtualizacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("UND_DATA_ATUALIZACAO")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Data da última atualização da unidade");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("UND_DATA_CRIACAO")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Data de criação da unidade");

                    b.Property<int>("Numero")
                        .HasColumnType("int")
                        .HasColumnName("UND_NUMERO")
                        .HasColumnOrder(3)
                        .HasComment("Número da unidade");

                    b.HasKey("Id")
                        .HasName("PK_UNIDADES");

                    b.HasIndex("CondominioId", "Numero", "Bloco")
                        .HasDatabaseName("IX_UNIDADES_CONDOMINIO_NUMERO_BLOCO");

                    b.ToTable("TB_UNIDADES", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Andar = 1,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 1
                        },
                        new
                        {
                            Id = 2,
                            Andar = 1,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 2
                        },
                        new
                        {
                            Id = 3,
                            Andar = 1,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 3
                        },
                        new
                        {
                            Id = 4,
                            Andar = 1,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 4
                        },
                        new
                        {
                            Id = 5,
                            Andar = 1,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 5
                        },
                        new
                        {
                            Id = 6,
                            Andar = 1,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 6
                        },
                        new
                        {
                            Id = 7,
                            Andar = 1,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 7
                        },
                        new
                        {
                            Id = 8,
                            Andar = 2,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 1
                        },
                        new
                        {
                            Id = 9,
                            Andar = 2,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 2
                        },
                        new
                        {
                            Id = 10,
                            Andar = 2,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 3
                        },
                        new
                        {
                            Id = 11,
                            Andar = 2,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 4
                        },
                        new
                        {
                            Id = 12,
                            Andar = 2,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 5
                        },
                        new
                        {
                            Id = 13,
                            Andar = 2,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 6
                        },
                        new
                        {
                            Id = 14,
                            Andar = 2,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 7
                        },
                        new
                        {
                            Id = 15,
                            Andar = 3,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 1
                        },
                        new
                        {
                            Id = 16,
                            Andar = 3,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 2
                        },
                        new
                        {
                            Id = 17,
                            Andar = 3,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 3
                        },
                        new
                        {
                            Id = 18,
                            Andar = 3,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 4
                        },
                        new
                        {
                            Id = 19,
                            Andar = 3,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 5
                        },
                        new
                        {
                            Id = 20,
                            Andar = 3,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 6
                        },
                        new
                        {
                            Id = 21,
                            Andar = 3,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 7
                        },
                        new
                        {
                            Id = 22,
                            Andar = 4,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 1
                        },
                        new
                        {
                            Id = 23,
                            Andar = 4,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 2
                        },
                        new
                        {
                            Id = 24,
                            Andar = 4,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 3
                        },
                        new
                        {
                            Id = 25,
                            Andar = 4,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 4
                        },
                        new
                        {
                            Id = 26,
                            Andar = 4,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 5
                        },
                        new
                        {
                            Id = 27,
                            Andar = 4,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 6
                        },
                        new
                        {
                            Id = 28,
                            Andar = 4,
                            Bloco = "1",
                            CondominioId = 1,
                            Numero = 7
                        },
                        new
                        {
                            Id = 29,
                            Andar = 1,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 1
                        },
                        new
                        {
                            Id = 30,
                            Andar = 1,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 2
                        },
                        new
                        {
                            Id = 31,
                            Andar = 1,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 3
                        },
                        new
                        {
                            Id = 32,
                            Andar = 1,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 4
                        },
                        new
                        {
                            Id = 33,
                            Andar = 1,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 5
                        },
                        new
                        {
                            Id = 34,
                            Andar = 1,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 6
                        },
                        new
                        {
                            Id = 35,
                            Andar = 1,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 7
                        },
                        new
                        {
                            Id = 36,
                            Andar = 2,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 1
                        },
                        new
                        {
                            Id = 37,
                            Andar = 2,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 2
                        },
                        new
                        {
                            Id = 38,
                            Andar = 2,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 3
                        },
                        new
                        {
                            Id = 39,
                            Andar = 2,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 4
                        },
                        new
                        {
                            Id = 40,
                            Andar = 2,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 5
                        },
                        new
                        {
                            Id = 41,
                            Andar = 2,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 6
                        },
                        new
                        {
                            Id = 42,
                            Andar = 2,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 7
                        },
                        new
                        {
                            Id = 43,
                            Andar = 3,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 1
                        },
                        new
                        {
                            Id = 44,
                            Andar = 3,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 2
                        },
                        new
                        {
                            Id = 45,
                            Andar = 3,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 3
                        },
                        new
                        {
                            Id = 46,
                            Andar = 3,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 4
                        },
                        new
                        {
                            Id = 47,
                            Andar = 3,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 5
                        },
                        new
                        {
                            Id = 48,
                            Andar = 3,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 6
                        },
                        new
                        {
                            Id = 49,
                            Andar = 3,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 7
                        },
                        new
                        {
                            Id = 50,
                            Andar = 4,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 1
                        },
                        new
                        {
                            Id = 51,
                            Andar = 4,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 2
                        },
                        new
                        {
                            Id = 52,
                            Andar = 4,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 3
                        },
                        new
                        {
                            Id = 53,
                            Andar = 4,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 4
                        },
                        new
                        {
                            Id = 54,
                            Andar = 4,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 5
                        },
                        new
                        {
                            Id = 55,
                            Andar = 4,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 6
                        },
                        new
                        {
                            Id = 56,
                            Andar = 4,
                            Bloco = "2",
                            CondominioId = 1,
                            Numero = 7
                        });
                });

            modelBuilder.Entity("EntregaSegura.Infra.Data.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MoradorId")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EntregaSegura.Domain.Entities.Entrega", b =>
                {
                    b.HasOne("EntregaSegura.Domain.Entities.Funcionario", "Funcionario")
                        .WithMany("Entregas")
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_FUNCIONARIO_ENTREGA");

                    b.HasOne("EntregaSegura.Domain.Entities.Morador", "Morador")
                        .WithMany("Entregas")
                        .HasForeignKey("MoradorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_MORADORES_ENTREGAS");

                    b.HasOne("EntregaSegura.Domain.Entities.Transportadora", "Transportadora")
                        .WithMany("Entregas")
                        .HasForeignKey("TransportadoraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ENTREGA_TRANSPORTADORA");

                    b.Navigation("Funcionario");

                    b.Navigation("Morador");

                    b.Navigation("Transportadora");
                });

            modelBuilder.Entity("EntregaSegura.Domain.Entities.Funcionario", b =>
                {
                    b.HasOne("EntregaSegura.Domain.Entities.Condominio", "Condominio")
                        .WithMany("Funcionarios")
                        .HasForeignKey("CondominioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_FUNCIONARIO_CONDOMINIO");

                    b.Navigation("Condominio");
                });

            modelBuilder.Entity("EntregaSegura.Domain.Entities.Morador", b =>
                {
                    b.HasOne("EntregaSegura.Domain.Entities.Unidade", "Unidade")
                        .WithMany("Moradores")
                        .HasForeignKey("UnidadeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_MORADORES_UNIDADES");

                    b.Navigation("Unidade");
                });

            modelBuilder.Entity("EntregaSegura.Domain.Entities.Unidade", b =>
                {
                    b.HasOne("EntregaSegura.Domain.Entities.Condominio", "Condominio")
                        .WithMany("Unidades")
                        .HasForeignKey("CondominioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UNIDADES_CONDOMINIOS");

                    b.Navigation("Condominio");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EntregaSegura.Infra.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EntregaSegura.Infra.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntregaSegura.Infra.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EntregaSegura.Infra.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntregaSegura.Domain.Entities.Condominio", b =>
                {
                    b.Navigation("Funcionarios");

                    b.Navigation("Unidades");
                });

            modelBuilder.Entity("EntregaSegura.Domain.Entities.Funcionario", b =>
                {
                    b.Navigation("Entregas");
                });

            modelBuilder.Entity("EntregaSegura.Domain.Entities.Morador", b =>
                {
                    b.Navigation("Entregas");
                });

            modelBuilder.Entity("EntregaSegura.Domain.Entities.Transportadora", b =>
                {
                    b.Navigation("Entregas");
                });

            modelBuilder.Entity("EntregaSegura.Domain.Entities.Unidade", b =>
                {
                    b.Navigation("Moradores");
                });
#pragma warning restore 612, 618
        }
    }
}
